Паттерн-машина

Данная статья - маленький мысленный эксперимент, с призывом к обсуждению, уточнению и опровержению. Свои познания в ИТ сфере считаю поверхностными, и готов принимать критику об изложенном ниже материале.

И так, для начала, я хочу привести список определений, а после привести пояснение.

Паттерн-машина - это вариант архитектуры разработки программного обеспечения, представляющий собой взаимодействие разработчика с древом паттернов и набором входных и выходных параметров.

Под архитектурой разработки понимается подход к построению программы, из которого формируется архитектура этой программы.

Древо паттернов - это структура, содержащая набор паттернов, с доступом к ним вне зависимости от уровня их расположения в этой структуре.

Используя такую идею, разработка будет представлять собой построение последовательности паттернов и обработку передаваемых между ними данных. То есть вместо написания кода происходит построение последовательности перемещения по древу паттернов. Стоит уточнить, древо паттернов это набор не только привычных разработчикам шаблонов проектирования, но и самых базовых регистровых операций в самых корнях древа, а следующие за ними представляют собой последовательности работы с базовыми операциями, что в принципе и реализовано в процессорах, но поднимаясь выше от корней древа мы будем видеть последовательности последовательностей работы с базовыми операциями. Главное свойство - что разработчик имеет доступ к каждой ячейке этого дерева (возможно описание такой структуры через дерево неправильно, и правильнее будет описать это через распараллеленную структуру данных). Пожалуй главная сложность при такой архитектуре от побитовых операций до привычных шаблонов проектирования - это разграничение уровня, где заканчивается один уровень представления, и начинается следующий, в противовес этому можно попробовать представить структуру, находящуюся в одном уровне представления, доступном разработчику и базовыми операциями являются арифметические и логические операции, а далее последовательности работы с ними.

Идея о разработке через набор паттернов натолкнула меня на мысль:

«Будет ли конечным количество паттернов, необходимых для разработки программ, решающих все человеческие потребности?»

То есть, можно ли человеческую жизнь разбить на фиксированное количество базовых операций, которые он регулярно повторяет, получая при этом различный результат.

Для ответа на этот вопрос можно попробовать пойти от обратного и узнать, можно ли последовательно разбивать программное обеспечение на последовательности переиспользуемых паттернов, чтобы паттерн оставался паттерном, а не используемой единожды функцией. Конечно учитывая человеческий фактор при разработке ПО, можно не пробовать идти от обратного, так как это вероятнее всего закончиться тупиком. Поэтому если размышлять не только об этом как о мысленном эксперименте, с идеализированно построенном программном обеспечении, но и подумать о реализации такого подхода, то для человека будет неэффективным поиск и создание структуры паттернов, более эффективным будет их описание самостоятельно, по ходу разработки, частично комбинируя их с паттернами высоких уровней описанной выше структуры (а это то, что из себя и представляет разработка ПО на данный момент). Возможно такой подход будет эффективен для машинного обучения, когда для создания ПО нейронная сеть будет использовать такую паттерн-машину.
